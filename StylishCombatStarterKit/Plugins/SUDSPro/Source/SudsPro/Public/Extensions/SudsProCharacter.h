// Copyright Old Doorways Ltd 2023
// All rights  reserved

#pragma once

#include "CoreMinimal.h"
#include "UObject/Interface.h"
#include "SudsProCharacter.generated.h"

// This class does not need to be modified.
UINTERFACE()
class USudsProCharacter : public UInterface
{
	GENERATED_BODY()
};

/**
 * Interface that Participants in dialogues can additionally implement to indicate that they are a character in the
 * dialogue. Characters can be moved to marks, and can have animation events sent to them.
 * Implementors of this interface MUST be actors.
 */
class SUDSPRO_API ISudsProCharacter
{
	GENERATED_BODY()

	// Add interface functions to this class. This is the class that will be inherited to implement this interface.
public:
	/**
	 * Return an identifier for this dialogue character, which will be used to locate specific characters.
	 * This is not a player-visible identifier and only needs to match the identifier you use in dialogue scripts.
	 * It doesn't have to be the same as the character's speaker ID in the dialogue script, but it probably makes sense
	 * for that to be the case.
	 * @return Unique identifier for this character in this dialogue.
	 */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category="SudsPro|Character")
	FName GetDialogueCharacterIdentifier();

	/**
	 * Called just before this character is about to be moved in response to a dialogue event.
	 * SUDS Pro will usually do the movement for you, but if you want to move the character yourself,
	 * then return true from this call. Return false to let SUDS Pro move the character (teleport).
	 * 
	 * @param Location The location the character is to be moved to
	 * @param Rotator The rotation the character is to be moved to
	 * @return Whether you will perform this character movement rather than letting SUDS Pro do it. If you'd prefer to move the character
	 * yourself (e.g. for making a character AI path to the location), or simply just cancel this movement, return
	 * true from this method to indicate you're handling it.
	 */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category="SudsPro|Character")
	bool PreDialogueMoveCharacter(const FVector& Location, const FRotator& Rotator);

	/**
	 * Called just after this character has been moved in response to a dialogue event.
	 * Note: you will not receive this call if you returned true from PreDialogueMoveCharacter to indicate you're doing the
	 * movement instead.
	 */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category="SudsPro|Character")
	void PostDialogueMoveCharacter();

	/**
	 * Return the animation (sequence or montage) corresponding to the incoming name used in dialogue script.
	 * This is used by the [event CharacterAnim `CharacterName`, `AnimName`] script command.
	 * @param AnimName The name of the animation.
	 * @return An animation sequence, or animation montage.
	 */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category="SudsPro|Character")
	UAnimSequenceBase* GetDialogueAnimation(FName AnimName);

	/**
	 * Optional function that allows you to specify which skeletal mesh component in the character should
	 * be targetted by a given animation name. If you don't implement this, or return null for a given
	 * character, the first skeletal mesh component found in the character will be used.
	 * You would want to implement this if you needed separate animation for a specific character component,
	 * for example to do facial animation on a Metahuman. I recommend naming your animations with a convention
	 * that indicates this, for example "Face_Smile", "Face_Frown", then you could simply look for a prefix
	 * in your implementation rather than explicitly determining the skeleton for each animation.
	 * @param AnimName The name of the animation
	 * @return The skeletal mesh component that should be targetted by this animation. 
	 */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category="SudsPro|Character")
	class USkeletalMeshComponent* GetDialogueSkeleton(FName AnimName);
	
	/**
	 * Receive a general notification from dialogue for this character.
	 * This call will be generated by the script command [event CharacterNotify `CharacterName`, `NotificationName`, Args...]
	 * Any number of arguments are supported of the types supported by FSUDSValue.
	 * This is quite similar to dialogue events, except that this notification is ONLY delivered to a specific character,
	 * and you also have the option of returning `true` to prevent the execution of subsequent dialogue lines until
	 * you say so.
	 * @param NotifyName The name of the event 
	 * @param Args Arguments accompanying the event
	 * @return Return true if you want the dialogue system to wait until you call USudsProSubsystem::CharacterNotifyCompleted.
	 * It's *essential* that you call this function when you're done, or your dialogue will break.
	 * before continuing with other lines in the dialogue. Return false if you don't mind dialogue continuing immediately
	 * after this call.
	 */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category="SudsPro|Character")
	bool OnDialogueNotify(FName NotifyName, const TArray<FSUDSValue>& Args);
};
